%header {: // Generated from C:\Users\imenrayan\Desktop\EMFeRTTC18-master\jastadd-mquat-base\build\tmp\preprocessParser\MquatParser.all
package de.tudresden.inf.st.mquat.jastadd.parser;
import de.tudresden.inf.st.mquat.jastadd.model.*;
import de.tudresden.inf.st.mquat.parser.MquatParserHelper;
import java.util.Map;
import java.util.HashMap; :};
%embed {: // Generated from C:\Users\imenrayan\Desktop\EMFeRTTC18-master\jastadd-mquat-base\build\tmp\preprocessParser\MquatParser.all
private MquatParserHelper mph = new MquatParserHelper();
  private static <T extends ASTNode<?>> void insertZero(List<T> listNode, T child) {
    listNode.insertChild(child, 0);
  }


  /**
   * Post processing step after parsing a model, to resolve all references within the model.
   * @throws java.util.NoSuchElementException if a reference can not be resolved
   */
  public void resolveReferences() {
    mph.resolveReferences();
  }


  /**
   * Post processing step after parsing a solution, to resolve all references.
   * @param model the model to resolve the references
   * @throws RuntimeException if assignments are malformed
   * @throws java.util.NoSuchElementException if a reference can not be resolved
   */
  public void resolveSolutionReferencesWith(Root model) {
    mph.resolveSolutionReferencesWith(model);
  } :};
%left RB_ROUND;
%left MULT, DIV;
%left PLUS, MINUS;
%left POW;
%terminals REQUEST;
%terminals LB_CURLY;
%terminals RB_CURLY;
%terminals META;
%terminals EQ;
%terminals LB_ROUND;
%terminals MULT;
%terminals RB_ROUND;
%terminals DIV;
%terminals PLUS;
%terminals MINUS;
%terminals POW;
%terminals INTEGER;
%terminals REAL;
%terminals MINIMIZE;
%terminals NAME;
%terminals DOT;
%terminals PROPERTY;
%terminals UNIT;
%terminals COMPONENT;
%terminals USING;
%terminals RESOURCE;
%terminals TYPE;
%terminals CONTAINER;
%terminals COLON;
%terminals CONTRACT;
%terminals COMMA;
%terminals REQUIRES;
%terminals OFTYPE;
%terminals WITH;
%terminals REQUIRING;
%terminals LT;
%terminals LE;
%terminals NE;
%terminals GE;
%terminals GT;
%terminals PROVIDING;
%terminals SOLUTION;
%terminals RIGHT_ARROW;
%typeof request = "Request";
%typeof request_list = "List";
%typeof component_body = "Component";
%typeof instance = "Instance";
%typeof software_model = "SoftwareModel";
%typeof inner_resource_requirement = "ResourceRequirement";
%typeof inner_resource_requirement_opt_list = "List";
%typeof inner_resource_requirement_list = "List";
%typeof objective = "Objective";
%typeof current_resource_value = "CurrentResourceValue";
%typeof meta_parameter_ref = "MetaParameterRef";
%typeof designator = "Designator";
%typeof meta_parameter_assignment = "MetaParameterAssignment";
%typeof property_ref = "PropertyRef";
%typeof solution = "Solution";
%typeof component_requirement = "ComponentRequirement";
%typeof property = "Property";
%typeof component_mapping = "ComponentMapping";
%typeof component_mapping_list = "List";
%typeof instance_list = "List";
%typeof resource_type_body = "ResourceType";
%typeof resource_type_body_opt = "Opt";
%typeof clause = "Clause";
%typeof expression = "Expression";
%typeof goal = "Root";
%typeof resource = "Resource";
%typeof assignment = "Assignment";
%typeof assignment_opt_list = "List";
%typeof assignment_list = "List";
%typeof implementation = "Implementation";
%typeof resource_type = "ResourceType";
%typeof resource_body = "Resource";
%typeof meta_parameter = "MetaParameter";
%typeof component_ref = "ComponentRef";
%typeof implementation_body = "Implementation";
%typeof resource_type_ref = "ResourceTypeRef";
%typeof component = "Component";
%typeof request_body = "Request";
%typeof qualified_name = "QualifiedName";
%typeof resource_requirement = "ResourceRequirement";
%typeof name = "Name";
%typeof hardware_model = "HardwareModel";
%typeof resource_mapping = "ResourceMapping";
%typeof resource_mapping_opt_list = "List";
%typeof resource_mapping_list = "List";
%typeof literal_expression = "LiteralExpression";
%goal goal;
%goal solution;
request =
    REQUEST.REQUEST component_ref.c LB_CURLY.LB_CURLY request_body.b RB_CURLY.RB_CURLY {: b.setTarget(c); return b; :}
  ;
request_body =
    meta_parameter_assignment.m request_body.b {: insertZero(b.getMetaParameterAssignmentList(), m); return b; :}

  | clause.c request_body.b {: insertZero(b.getConstraintList(), c); return b; :}

  | meta_parameter_assignment.m {: return new Request(new List<>(m), null, new List<>()); :}

  | clause.c {: return new Request(new List<>(), null, new List<>(c)); :}
  ;
meta_parameter_assignment =
    META.META meta_parameter_ref.n EQ.EQ literal_expression.e {: return new MetaParameterAssignment(n, e); :}
  ;
expression =
    LB_ROUND.LB_ROUND expression.a MULT.MULT expression.b RB_ROUND.RB_ROUND {: return new MultExpression(a, b); :}

  | LB_ROUND.LB_ROUND expression.a DIV.DIV expression.b RB_ROUND.RB_ROUND {: return new DivExpression(a, b); :}

  | LB_ROUND.LB_ROUND expression.a PLUS.PLUS expression.b RB_ROUND.RB_ROUND {: return new AddExpression(a, b); :}

  | LB_ROUND.LB_ROUND expression.a MINUS.MINUS expression.b RB_ROUND.RB_ROUND {: return new SubExpression(a, b); :}

  | LB_ROUND.LB_ROUND expression.a POW.POW expression.b RB_ROUND.RB_ROUND {: return new PowerExpression(a, b); :}

  | literal_expression.l {: return l; :}

  | designator.d {: return d; :}

  | LB_ROUND.LB_ROUND expression.e RB_ROUND.RB_ROUND {: return new ParenthesizedExpression(e); :}
  ;
literal_expression =
    INTEGER.n {: return new LiteralExpression(Integer.parseInt(((String)n.value))); :}

  | REAL.n {: return new LiteralExpression(Double.parseDouble(((String)n.value))); :}
  ;
objective =
    MINIMIZE.MINIMIZE NAME.n LB_ROUND.LB_ROUND property_ref.p RB_ROUND.RB_ROUND {: if (((String)n.value).equals("sum")) {
        return new Objective(p, PropertyAggregation.SUM);
      } else if (((String)n.value).equals("maximum")) {
        return new Objective(p, PropertyAggregation.MAX);
      } :}
  ;
goal =
    hardware_model.h software_model.s objective.o {: return new Root(h,s,new List(),o); :}

  | hardware_model.h software_model.s request_list.r objective.o {: return new Root(h,s,r,o); :}
  ;
meta_parameter =
    META.META name.n {: MetaParameter m = new MetaParameter(n);
      mph.metaParameterMap.put(n.getName(), m);
      return m; :}
  ;
meta_parameter_ref =
    name.n {: MetaParameterRef ref = new MetaParameterRef(n, null);
      mph.metaParameterRefList.add(ref);
      return ref; :}
  ;
name =
    NAME.i {: return new Name(((String)i.value)); :}
  ;
qualified_name =
    name.n DOT.DOT qualified_name.q {: insertZero(q.getNameList(), n); return q; :}

  | name.n {: List<Name> names = new List<>(); names.add(n); return new QualifiedName(names); :}
  ;
property =
    PROPERTY.PROPERTY name.n UNIT.u {: Property p = new Property(n, ((String)u.value).substring(1, ((String)u.value).length() - 1));
      mph.propertyMap.put(n.getName(), p);
      return p; :}
  ;
property_ref =
    name.n {: PropertyRef ref = new PropertyRef(n, null); mph.propertyRefList.add(ref); return ref; :}
  ;
software_model =
    meta_parameter.a software_model.m {: insertZero(m.getMetaParameterList(), a); return m; :}

  | component.c software_model.m {: insertZero(m.getComponentList(), c); return m; :}

  | property.p software_model.m {: insertZero(m.getPropertyList(), p); return m; :}

  | meta_parameter.m {: return new SoftwareModel(new List<>(m), new List<>(), new List<>()); :}

  | component.c {: return new SoftwareModel(new List<>(), new List<>(c), new List<>()); :}

  | property.p {: return new SoftwareModel(new List<>(), new List<>(), new List<>(p)); :}
  ;
component =
    COMPONENT.COMPONENT name.n LB_CURLY.LB_CURLY component_body.r RB_CURLY.RB_CURLY {: r.setName(n);
      mph.componentMap.put(n.getName(), r);
      return r; :}
  ;
component_body =
    implementation.i component_body.b {: insertZero(b.getImplementationList(), i); return b; :}

  | property.p component_body.b {: insertZero(b.getPropertyList(), p); return b; :}

  | USING.USING PROPERTY.PROPERTY property_ref.r component_body.b {: insertZero(b.getPropertyRefList(), r); return b; :}

  | implementation.i {: return new Component(null, new List<>(i), new List<>(), new List<>()); :}

  | property.p {: return new Component(null, new List<>(), new List<>(p), new List<>()); :}

  | USING.USING PROPERTY.PROPERTY property_ref.r {: return new Component(null, new List<>(), new List<>(), new List<>(r)); :}
  ;
component_ref =
    name.n {: ComponentRef ref = new ComponentRef(n, null); mph.componentRefList.add(ref); return ref; :}
  ;
hardware_model =
    resource_type.r hardware_model.m {: insertZero(m.getResourceTypeList(), r); return m; :}

  | resource.s hardware_model.m {: insertZero(m.getResourceList(), s); return m; :}

  | property.p hardware_model.m {: insertZero(m.getPropertyList(), p); return m; :}

  | resource_type.r {: return new HardwareModel(new List<>(r), new List<>(), new List<>()); :}

  | resource.s {: return new HardwareModel(new List<>(), new List<>(s), new List<>()); :}

  | property.p {: return new HardwareModel(new List<>(), new List<>(), new List<>(p)); :}
  ;
resource_type =
    RESOURCE.RESOURCE TYPE.TYPE name.n LB_CURLY.LB_CURLY resource_type_body_opt.opt RB_CURLY.RB_CURLY {: ResourceType b;
      if (opt.getNumChild() > 0) {
        b = (ResourceType) opt.getChild(0);
      } else {
        b = new ResourceType(null, false, new List<>(), new List<>(), new List<>());
      }
      b.setName(n);
      b.setContainer(false);
      mph.resourceTypeMap.put(n.getName(), b);
      return b; :}

  | CONTAINER.CONTAINER RESOURCE.RESOURCE TYPE.TYPE name.n LB_CURLY.LB_CURLY resource_type_body_opt.opt RB_CURLY.RB_CURLY {: ResourceType b;
      if (opt.getNumChild() > 0) {
        b = (ResourceType) opt.getChild(0);
      } else {
        b = new ResourceType(null, false, new List<>(), new List<>(), new List<>());
      }
      b.setName(n);
      b.setContainer(true);
      mph.resourceTypeMap.put(n.getName(), b);
      return b; :}
  ;
resource_type_body =
    resource_type.r resource_type_body.b {: insertZero(b.getSubTypeList(), r); return b; :}

  | property.p resource_type_body.b {: insertZero(b.getPropertyList(), p); return b; :}

  | USING.USING PROPERTY.PROPERTY property_ref.pr resource_type_body.b {: insertZero(b.getPropertyRefList(), pr); return b; :}

  | resource_type.r {: return new ResourceType(null, false, new List<>(r), new List<>(), new List<>()); :}

  | property.p {: return new ResourceType(null, false, new List<>(), new List<>(p), new List<>()); :}

  | USING.USING PROPERTY.PROPERTY property_ref.pr {: return new ResourceType(null, false, new List<>(), new List<>(), new List<>(pr)); :}
  ;
resource_type_ref =
    name.n {: ResourceTypeRef ref = new ResourceTypeRef(n, null);
      mph.resourceTypeRefList.add(ref);
      return ref; :}
  ;
resource =
    RESOURCE.RESOURCE name.n COLON.COLON resource_type_ref.r LB_CURLY.LB_CURLY RB_CURLY.RB_CURLY {: return new Resource(n, r, new List<>(), new List<>()); :}

  | RESOURCE.RESOURCE name.n COLON.COLON resource_type_ref.r LB_CURLY.LB_CURLY resource_body.b RB_CURLY.RB_CURLY {: b.setName(n);
      b.setType(r);
      return b; :}
  ;
resource_body =
    resource.r resource_body.b {: insertZero(b.getSubResourceList(), r); return b; :}

  | current_resource_value.v resource_body.b {: insertZero(b.getCurrentResourceValueList(), v); return b; :}

  | resource.r {: return new Resource(null, null, new List<>(r), new List<>()); :}

  | current_resource_value.v {: return new Resource(null, null, new List<>(), new List<>(v)); :}
  ;
current_resource_value =
    property_ref.r EQ.EQ literal_expression.l {: return new CurrentResourceValue(r,l); :}
  ;
implementation =
    CONTRACT.CONTRACT name.n LB_CURLY.LB_CURLY implementation_body.b RB_CURLY.RB_CURLY {: b.setName(n); return b; :}
  ;
instance =
    name.n {: return new Instance(n); :}
  ;
instance_list =
    instance.i COMMA.COMMA instance_list.l {: insertZero(l, i); :}

  | instance.i {: return new List<>(i); :}
  ;
component_requirement =
    REQUIRES.REQUIRES COMPONENT.COMPONENT instance_list.l OFTYPE.OFTYPE component_ref.cr {: return new ComponentRequirement(cr, l); :}
  ;
resource_requirement =
    REQUIRES.REQUIRES RESOURCE.RESOURCE instance_list.l OFTYPE.OFTYPE resource_type_ref.rr WITH.WITH LB_CURLY.LB_CURLY inner_resource_requirement_opt_list.irr RB_CURLY.RB_CURLY {: return new ResourceRequirement(rr, l, irr); :}

  | REQUIRES.REQUIRES RESOURCE.RESOURCE instance_list.l OFTYPE.OFTYPE resource_type_ref.rr {: return new ResourceRequirement(rr, l, new List<>()); :}
  ;
inner_resource_requirement =
    instance_list.l OFTYPE.OFTYPE resource_type_ref.rr WITH.WITH LB_CURLY.LB_CURLY inner_resource_requirement_opt_list.irr RB_CURLY.RB_CURLY {: return new ResourceRequirement(rr, l, irr); :}

  | instance_list.l OFTYPE.OFTYPE resource_type_ref.rr {: return new ResourceRequirement(rr, l, new List<>()); :}
  ;
designator =
    qualified_name.n {: return new QualifiedNameDesignator(n); :}
  ;
clause =
    REQUIRING.REQUIRING designator.d LT.LT expression.e {: return new Clause(ClauseType.REQUIRING, d, ClauseComparator.LT, e); :}

  | REQUIRING.REQUIRING designator.d LE.LE expression.e {: return new Clause(ClauseType.REQUIRING, d, ClauseComparator.LE, e); :}

  | REQUIRING.REQUIRING designator.d EQ.EQ expression.e {: return new Clause(ClauseType.REQUIRING, d, ClauseComparator.EQ, e); :}

  | REQUIRING.REQUIRING designator.d NE.NE expression.e {: return new Clause(ClauseType.REQUIRING, d, ClauseComparator.NE, e); :}

  | REQUIRING.REQUIRING designator.d GE.GE expression.e {: return new Clause(ClauseType.REQUIRING, d, ClauseComparator.GE, e); :}

  | REQUIRING.REQUIRING designator.d GT.GT expression.e {: return new Clause(ClauseType.REQUIRING, d, ClauseComparator.GT, e); :}

  | PROVIDING.PROVIDING designator.d LT.LT expression.e {: return new Clause(ClauseType.PROVIDING, d, ClauseComparator.LT, e); :}

  | PROVIDING.PROVIDING designator.d LE.LE expression.e {: return new Clause(ClauseType.PROVIDING, d, ClauseComparator.LE, e); :}

  | PROVIDING.PROVIDING designator.d EQ.EQ expression.e {: return new Clause(ClauseType.PROVIDING, d, ClauseComparator.EQ, e); :}

  | PROVIDING.PROVIDING designator.d NE.NE expression.e {: return new Clause(ClauseType.PROVIDING, d, ClauseComparator.NE, e); :}

  | PROVIDING.PROVIDING designator.d GE.GE expression.e {: return new Clause(ClauseType.PROVIDING, d, ClauseComparator.GE, e); :}

  | PROVIDING.PROVIDING designator.d GT.GT expression.e {: return new Clause(ClauseType.PROVIDING, d, ClauseComparator.GT, e); :}
  ;
implementation_body =
    component_requirement.cr implementation_body.b {: insertZero(b.getComponentRequirementList(), cr); return b; :}

  | resource_requirement.rr implementation_body.b {: b.setResourceRequirement(rr); return b; :}

  | clause.c implementation_body.b {: insertZero(b.getClauseList(), c); return b; :}

  | component_requirement.cr {: return new Implementation(null, new List<>(cr), null, new List<>()); :}

  | resource_requirement.rr {: return new Implementation(null, new List<>(), rr, new List<>()); :}

  | clause.c {: return new Implementation(null, new List<>(), null, new List<>(c)); :}
  ;
solution =
    SOLUTION.SOLUTION LB_CURLY.LB_CURLY assignment_opt_list.al RB_CURLY.RB_CURLY {: mph.unfinishedSolution = new Solution(null, al);
      return mph.unfinishedSolution; :}
  ;
assignment =
    NAME.i RIGHT_ARROW.RIGHT_ARROW NAME.impl LB_CURLY.LB_CURLY resource_mapping.rm RB_CURLY.RB_CURLY {: Assignment result = new Assignment(true, null, null, rm, new List());
      mph.assignmentTerminals.put(result, new Tuple<>(((String)i.value), ((String)impl.value)));
      return result; :}

  | NAME.i RIGHT_ARROW.RIGHT_ARROW NAME.impl LB_CURLY.LB_CURLY resource_mapping.rm component_mapping_list.cml RB_CURLY.RB_CURLY {: Assignment result = new Assignment(true, null, null, rm, cml);
      mph.assignmentTerminals.put(result, new Tuple<>(((String)i.value), ((String)impl.value)));
      return result; :}
  ;
resource_mapping =
    NAME.i RIGHT_ARROW.RIGHT_ARROW NAME.res {: ResourceMapping result = new ResourceMapping();
      mph.resourceMappingTerminals.put(result, new Tuple<>(((String)i.value), ((String)res.value)));
      return result; :}

  | NAME.i RIGHT_ARROW.RIGHT_ARROW NAME.res LB_CURLY.LB_CURLY resource_mapping_opt_list.rml RB_CURLY.RB_CURLY {: ResourceMapping result = new ResourceMapping(null, null, rml);
      mph.resourceMappingTerminals.put(result, new Tuple<>(((String)i.value), ((String)res.value)));
      return result; :}
  ;
component_mapping =
    assignment.a {: a.setTopLevel(false);
      ComponentMapping result = new ComponentMapping(null, a);
      return result; :}
  ;
request_list =
	 request.n
	 {: return new List().add(n); :}
  | request_list.l request.n
	 {: return l.add(n); :}
  ;
inner_resource_requirement_opt_list =
	 {: return new List(); :}
  | inner_resource_requirement_list.n
	 {: return n; :}
  ;
inner_resource_requirement_list =
	 inner_resource_requirement.n
	 {: return new List().add(n); :}
  | inner_resource_requirement_list.l inner_resource_requirement.n
	 {: return l.add(n); :}
  ;
component_mapping_list =
	 component_mapping.n
	 {: return new List().add(n); :}
  | component_mapping_list.l component_mapping.n
	 {: return l.add(n); :}
  ;
resource_type_body_opt =
	 {: return new Opt(); :}
  | resource_type_body.n
	 {: return new Opt(n); :}
  ;
assignment_opt_list =
	 {: return new List(); :}
  | assignment_list.n
	 {: return n; :}
  ;
assignment_list =
	 assignment.n
	 {: return new List().add(n); :}
  | assignment_list.l assignment.n
	 {: return l.add(n); :}
  ;
resource_mapping_opt_list =
	 {: return new List(); :}
  | resource_mapping_list.n
	 {: return n; :}
  ;
resource_mapping_list =
	 resource_mapping.n
	 {: return new List().add(n); :}
  | resource_mapping_list.l resource_mapping.n
	 {: return l.add(n); :}
  ;
